<?php
/*
 * This file is part of EC-CUBE
 *
 * Copyright(c) 2000-2015 LOCKON CO.,LTD. All Rights Reserved.
 *
 * http://www.lockon.co.jp/
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

namespace Plugin\ProductRank\Repository;

use Eccube\Entity\ProductCategory;
use Eccube\Entity\Category;
use Eccube\Repository\ProductCategoryRepository;
use Doctrine\ORM\EntityManagerInterface;

/**
 * ProductRank
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRankRepository
{
    /**
     * @var ProductCategoryRepository
     */
    protected $productCategoryRepository;

    /**
     * @var EntityManagerInterface
     */
    protected $entityManager;

    /**
     * ProductRankRepository constructor.
     *
     * @param EntityManagerInterface $entityManager
     * @param ProductCategoryRepository $productCategoryRepository
     */
    public function __construct(
        EntityManagerInterface $entityManager,
        ProductCategoryRepository $productCategoryRepository
    ) {
        $this->entityManager = $entityManager;
        $this->productCategoryRepository = $productCategoryRepository;
    }

    /**
     * Find by Category
     *
     * @param Category $Category
     *
     * @return ProductCategory[]|null
     */
    public function findBySearchData(Category $Category = null)
    {
        if (empty($Category) || !$Category) {
            return null;
        }

        /** @var \Doctrine\ORM\QueryBuilder $qb */
        $qb = $this->productCategoryRepository->createQueryBuilder('pc');
        $qb->select('pc,p,c')
            ->innerJoin('pc.Product', 'p')
            ->innerJoin('pc.Category', 'c')
            ->where($qb->expr()->eq('pc.Category', ':Category'))
            ->setParameter('Category', $Category)
            ->orderBy('c.sort_no', 'DESC')
            ->addOrderBy('pc.sort_no', 'DESC')
            ->addOrderBy('p.id', 'DESC');

        return $qb->getQuery()->getResult();
    }

    /**
     * Up rank
     *
     * @param ProductCategory $TargetProductCategory
     * @return bool
     *
     * @throws \Doctrine\DBAL\ConnectionException
     */
    public function up(ProductCategory $TargetProductCategory)
    {
        $this->entityManager->getConnection()->beginTransaction();
        try {
            $sortNo = $TargetProductCategory->getSortNo();

            /** @var ProductCategory $ProductCategoryUp */
            $ProductCategoryUp = $this->productCategoryRepository
                ->createQueryBuilder('pc')
                ->where('pc.sort_no > :sort_no and pc.category_id = :category_id AND pc.product_id != :product_id')
                ->setParameter('sort_no', $sortNo)
                ->setParameter('category_id', $TargetProductCategory->getCategoryId())
                ->setParameter('product_id', $TargetProductCategory->getProductId())
                ->orderBy('pc.sort_no', 'ASC')
                ->setMaxResults(1)
                ->getQuery()
                ->getSingleResult();

            $TargetProductCategory->setSortNo($ProductCategoryUp->getSortNo());
            $ProductCategoryUp->setSortNo($sortNo);

            $this->entityManager->persist($TargetProductCategory);
            $this->entityManager->persist($ProductCategoryUp);

            $this->entityManager->flush();
            $this->entityManager->getConnection()->commit();

            return true;
        } catch (\Exception $e) {
            $this->entityManager->getConnection()->rollback();
            $this->entityManager->close();
            log_error('ProductRank Plugin', [$e]);
        }

        return false;
    }

    /**
     * Down rank
     *
     * @param ProductCategory $TargetProductCategory
     * @return bool
     *
     * @throws \Doctrine\DBAL\ConnectionException
     */
    public function down(ProductCategory $TargetProductCategory) {

        $this->entityManager->getConnection()->beginTransaction();
        try {
            $sortNo = $TargetProductCategory->getSortNo();

            /** @var ProductCategory $ProductCategoryDown */
            $ProductCategoryDown = $this->productCategoryRepository
                ->createQueryBuilder('pc')
                ->where('pc.sort_no <= :sort_no and pc.category_id = :category_id AND pc.product_id != :product_id')
                ->setParameter('sort_no', $sortNo)
                ->setParameter('category_id', $TargetProductCategory->getCategoryId())
                ->setParameter('product_id', $TargetProductCategory->getProductId())
                ->orderBy('pc.sort_no', 'DESC')
                ->setMaxResults(1)
                ->getQuery()
                ->getSingleResult();

            $TargetProductCategory->setSortNo($ProductCategoryDown->getSortNo());
            $ProductCategoryDown->setSortNo($sortNo);

            $this->entityManager->persist($TargetProductCategory);
            $this->entityManager->persist($ProductCategoryDown);

            $this->entityManager->flush();
            $this->entityManager->getConnection()->commit();

            return true;
        } catch (\Exception $e) {
            $this->entityManager->getConnection()->rollback();
            $this->entityManager->close();
            log_error('ProductRank Plugin', [$e]);
        }

        return false;
    }

    /**
     * @param Category $Category
     * @return bool
     * @throws \Doctrine\DBAL\ConnectionException
     */
    public function renumber(Category $Category)
    {
        $this->entityManager->getConnection()->beginTransaction();
        try {
            $ProductCategories = $this->findBySearchData($Category);

            $sortNo = count($ProductCategories);
            foreach ($ProductCategories as $ProductCategory) {
                /** @var ProductCategory $ProductCategory */
                $ProductCategory = $this->productCategoryRepository->findOneBy([
                    'category_id' => $ProductCategory->getCategoryId(),
                    'product_id' => $ProductCategory->getProductId()
                ]);
                $ProductCategory->setSortNo($sortNo);
                $this->entityManager->persist($ProductCategory);
                $sortNo--;
            }
            $this->entityManager->flush();

            $this->entityManager->getConnection()->commit();

            return true;
        } catch (\Exception $e) {
            $this->entityManager->getConnection()->rollback();
            $this->entityManager->close();
            log_error('ProductRank Plugin', [$e]);
        }

        return false;
    }

    /**
     * @param ProductCategory $TargetProductCategory
     * @param $position
     * @return bool
     * @throws \Doctrine\DBAL\ConnectionException
     */
    public function moveRank(ProductCategory $TargetProductCategory, $position)
    {
        $this->entityManager->getConnection()->beginTransaction();
        try {
            $oldSortNo = $TargetProductCategory->getSortNo();

            // 最大値取得
            $qb = $this->productCategoryRepository->createQueryBuilder('pc');
            $max = $qb
                ->select($qb->expr()->max('pc.sort_no'))
                ->where($qb->expr()->eq('pc.category_id', $TargetProductCategory->getCategoryId()))
                ->getQuery()
                ->getSingleScalarResult();

            $position = $max - ($position - 1);
            $position = max(1, $position);
            $TargetProductCategory->setSortNo($position);
            $status = true;
            if ($position != $oldSortNo) {
                // 他のItemのランクを調整する
                if ($position < $oldSortNo) {
                    // down
                    $this->entityManager->createQueryBuilder()
                        ->update(ProductCategory::class, 'pc')
                        ->set('pc.sort_no', 'pc.sort_no + 1')
                        ->where('pc.sort_no <= :oldSortNo AND pc.sort_no >= :sortNo AND pc.category_id = :categoryId AND pc.product_id != :productId')
                        ->setParameter('oldSortNo', $oldSortNo)
                        ->setParameter('sortNo', $position)
                        ->setParameter('categoryId', $TargetProductCategory->getCategoryId())
                        ->setParameter('productId', $TargetProductCategory->getProductId())
                        ->getQuery()
                        ->execute();
                } else {
                    // up
                    $this->entityManager->createQueryBuilder()
                        ->update(ProductCategory::class, 'pc')
                        ->set('pc.sort_no', 'pc.sort_no - 1')
                        ->where('pc.sort_no >= :oldSortNo AND pc.sort_no <= :sortNo AND pc.category_id = :categoryId AND pc.product_id != :productId')
                        ->setParameter('oldSortNo', $oldSortNo)
                        ->setParameter('sortNo', $position)
                        ->setParameter('categoryId', $TargetProductCategory->getCategoryId())
                        ->setParameter('productId', $TargetProductCategory->getProductId())
                        ->getQuery()
                        ->execute();
                }
                $this->entityManager->persist($TargetProductCategory);

                $this->entityManager->flush();
            }
            $this->entityManager->getConnection()->commit();

            return $status;
        } catch (\Exception $e) {
            $this->entityManager->getConnection()->rollback();
            $this->entityManager->close();
            log_error('ProductRank Plugin', [$e]);
        }

        return false;
    }
}
